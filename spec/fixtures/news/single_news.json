{
  "url": "https://zwischenzugs.com/2021/07/12/if-you-want-to-transform-it-start-with-finance/",
  "cover_image_url": "https://zwischenzugs.files.wordpress.com/2021/07/karl_marx_001.jpeg",
  "title": "If You Want To Transform IT, Start With Finance",
  "sub_title": null,
  "description": "tl;dr – ‘Money Flows Rule Everything Around Me’ When talking about IT transformation, we often we often talk about ‘culture’ being the problem in making change, but wh…",
  "content": "<div><div>\n\n tl;dr – ‘Money Flows Rule Everything Around Me’ \n<p>When talking about IT transformation, we often we often talk about ‘culture’ being the problem in making change, but why stop there?</p>\n<p>If we take a ‘5 whys‘ approach, then we should go deeper. So, where can we go from ‘culture’?</p>\n<p>Here I suggest we should consider a deeper structural cause of cultural problems in change management: how money flows through the organisation.</p>\n<p>If you want to change an organisation, you need to look at how money works within it.</p>\n<p>I talked a little about this in a recent podcast.</p>\n Picking Up Two Old Threads \n<p>In this post I want to pick up here on two threads that have cropped up in previous posts and bring them together.</p>\n ‘Start with Finance’ \n<p>An aside I made in this somewhat controversial previous post:</p>\n Command and control financial governance structures just aren’t changing overnight to suit an agile provisioning model. (As an aside, if you want to transform IT in an enterprise, start with finance. If you can crack that, you’ve a chance to succeed with sec and controls functions. If you don’t know why it’s important to start with finance, you’ll definitely fail).zwischenzugs.com/ \n<p>was picked up on by many people. They wanted to know more about why I was so vehement on that. Unfortunately, it was a throwaway line, and there was too much to unpack and it wasn’t clearly formed in my mind. But like many throwaway lines, it revealed a thread that might be good to pull on.</p>\n<p>2. ‘Culture – Be Specific!’</p>\n<p>Previously I was triggered by Charity Majors (@mipsytipsy) to write about my frustration at IT’s apparent inability to probe deeper than ‘culture’ when trying to diagnose problems in technical businesses.</p>\n\"Culture\" can't be broken, any more than \"complexity\" can be the cause of failure.Fucking get specific.— Charity Majors (@mipsytipsy) February 6, 2018\n<p>Since then, I’ve spent more time in the course of my work trying to figure out what’s blocking companies from trying to change and increasingly have worked back from people and process to sales and funding.</p>\n The Argument \n<p>The argument breaks down like this:</p>\n To achieve anything significant you need fundingTo get funding you need to persuade the people with the money to part with itTo persuade the people with the money, you need to understand what they valueTo understand what they value, you need to understand how their cash flows workTo understand how their cash flow works, you need to understandyour customers/clients and how and why they part with their moneythe legal and regulatory constraints on your business and how it operates  \n<p>Or, put more engagingly:</p>\n<p>Any significant decision or change therefore gets made in the context and constraints of how and why money is distributed to, and within, the business.</p>\n<p>In addition to this systemic level, there is also a more visceral personal level on which money flows can change or affect behaviour. Compensation, threats of firing, and bonuses can all drive good or bad behaviours. Or, as it’s been put pithily before:</p>\n When you’ve got them by their wallets, their hearts and minds will follow.Fern Naito \n<p>This is not to say that all culture is 100% determined by money flows. Individuals can make a difference, and go against the tide. But in the end, the tide is hard to fight.</p>\n  \n<p>There is a precedent for this argument in philosophy. Karl Marx argued  that societal culture (the ‘superstructure’) was ultimately determined  by material relations of production (the ‘base’). From wikipedia:</p>\n The base comprises the forces and relations of production (e.g. employer–employee work conditions, the technical division of labour, and property relations) into which people enter to produce the necessities and amenities of life. The base determines society’s other relationships and ideas to comprise its superstructure, including its culture, institutions, political power structures, roles, rituals, and state. The relation of the two parts is not strictly unidirectional, Marx and Engels warned against such economic determinism as the superstructure can affect the base. However the influence of the base is predominant.[1] Wikipedia, Base and Superstructure \n<div>You have nothing to lose but your blockchains.</div>\n  \n What Does This Mean For IT? \n<p>The theory is all very interesting, but what does this mean in practice?</p>\n<p>There is a very common pattern in software companies’ histories (especially if they were founded before the Software-as-a-Service age), and understanding their flows in terms of their histories can explain a lot about how and why they struggle to change. I have seen it multiple times in the course of my work, both as a consultant and as an employee.</p>\n The Four Stages \n Stage I – Hero Hacking \n<p>When a software company starts up, it often builds a product for a few big customers that sustain their cash flow in the early days. These times are a natural fit for ‘hero hackers’ who build features and fix bugs on live systems all night to help get that contract signed and keep their customers happy.</p>\n<p>Your few customers are all important and demand features peculiar to them, so you keep delivery times low by having customer-specific code, or even forking the entire product codebase to keep up.</p>\n<div>Stage I – customer asks, customer gets</div>\n Stage II – Pseudo Product \n<p>Now that you have some customers and they are happy with the product, its features, and your staff’s dedication to keeping them happy, more customers come along. So you sign contracts with them, and before you know it you have numerous customers.</p>\n<p>Of course, you’re selling your services as a product, but the reality is that it’s a mess. Each installation is more or less unique, and requires individual teams to maintain or develop on them.</p>\n<div>Stage II – Customer pays, customer gets… eventually. Things have gotten more complicated.</div>\n<p>This is where things start to get more complicated.</p>\n Features grow and diverge for difference customersFeatures get built in parallel for different customers, sometimes similar, but not the sameDatabase schemas divergePorting features sounds trivial (it’s a product, right?) but gets messy as code gets passed around different codebasesSome attempts are made to centralise or share core functionality, but this can slow down delivery or just get too complicated for teams to maintain \n<p>Grumbles from customers and between development teams start to increase in volume.</p>\n Stages IIIa and IIIb \n<p>The last two stages are closely related. Either or both can happen in the same company. Stage IIIb doesn’t necessarily follow from Stage IIIa, it’s really just the same problem in another form for the SaaS age.</p>\n Stage IIIa – We Want To Be A Product Company \n<p>As you get more and more customers it makes less and less sense to have these different teams porting features from one codebase to another, or copying and pasting for individual projects. Customers start to complain that their system is expensive to build on and maintain, as feature x requires ‘integration’ or some kind of bespoke delivery cost for their deployment. </p>\n<p>At this point someone says: ‘Wouldn’t it make more sense for us to maintain one product, and maintain that centrally for multiple customers? That way, we can sell the same thing over and over again, increase the license cost, reduce delivery cost and make more profit.’</p>\n<p>Stage III is where the cracks really start to show, and we go into how and why this happens this below.</p>\n<div>The product vision – more customers pays less, and product improves</div>\n Stage IIIb – We Need An Internal Platform \n<p>As the (pseudo or real) product offering grows, or as you increasingly offer your software as a service on the cloud rather than a package delivered in a data centre, you invest heavily in a ‘platform’ that is designed to enable deliveries to be faster, cheaper, and better.</p>\n<p>You might even set up some kind of platform team to build these cross-product features. It’s a similar justification to the product one: ‘Wouldn’t it make more sense for us to maintain one platform, and use it to deliver products for multiple customers? That way we could reduce cost of delivery for all the customers that use the platform, and increase quality at the same time.’</p>\n Where Does It All Go Wrong? \n<p>So how do things go wrong?</p>\n<p>From Stage I to Stage II, things are relatively smooth. Everyone understands their role, and the difficulties you face are tough, but tractable and clear. As you go to Stage IIIa/b, it feels very tough to move towards the envisioned target. Everyone seems to agree what the goal is, but the reality is:</p>\n Customers still want their new features fast (and faster than their competition), and don’t want their requests to be ‘put on the backlog’The merging of the codebases seems never to happenAttempts to write new, unifying products are difficult to build and sell \n<p>All of these difficulties and failures can often be tracked to money flows.</p>\n<p>Similarly, with platform teams:</p>\n The business wants to build a platform, but balks at the cost and struggles to see the valueThe business has built the platform, but doesn’t accept that it needs a team to sustain itThe business has built a platform for reliability, but ‘heroes’ still want to fix things by hand for the glory rather than quietly tinker with a CI/CD workflow \n<p>Again, all of these difficulties and failures can often be tracked to money flows.</p>\n How This Happens – Money Flow Patterns \n<p>These difficulties come down to challenges moving from project to product, and these difficulties in turn come from how money moves into and through the business.</p>\n Stage I Money Flows – Hero Hacking \n<p>In Stage I, the money flows are simple:</p>\n Team builds software in cheap offices, often on low salaries with the promise of growth to come or fun, adventure and really wild thingsThe first customers are won because the product does something cheaper or better than the competitionThe money from the first customers pays for nicer offices and more teamsMore money comes in as customers demand modifications or maintenance on the delivery   \n<p>The reality at Stage I is that there is no real ‘product’. There are projects that deliver what the customer needs, and the business is happy to provide these as each individual project is profitable (either on a ‘time and materials’ or a ‘fixed cost’ basis), and that results in a healthy profit at the end of the year.</p>\n<p>The price that’s paid is that each customer’s codebase and configuration diverges, making porting those features and maintenance patterns a little more costly as time goes on.</p>\n<p>But no matter: the business has a simple model for cash flow: keep the customer happy and the money flows in, and each customer gets the development and maintenance attention they pay for.</p>\n<div>Stage I – customer asks, customer gets</div>\n Stage II Money Flows – Pseudo Product \n<p>In Stage II, the money flows are much the same, but the cracks are starting to show:</p>\n Customers are still happy with the attention they get, but:Projects seem to take longer and cost moreFeatures that are apparently part of the product can’t be just ‘switched on’, but require ‘integration time’The quality of the software feels low, as fixes are required because of the extra work required to integrate changes \n<div>Stage II – Customer pays, customer gets… eventually. Things have gotten more complicated.</div>\n<p>At this point, customer executives start to say they yearn for a product that has a more predictable quality to it, and a roadmap, and is cheaper and feels less bespoke. Can’t all us customers just pay a lower fee every year and get a steadily improving product?</p>\n<p>At the same time, the owners of the business are asking themselves whether they couldn’t make more money the same way: instead of 15 customers, wouldn’t it be great if we have 150, all taking the same product and paying (say) half the cost they are now? That kind of margin looks very tempting… </p>\n<p>The result is that changes in external demand produce a desire to change the development model.</p>\n Stage IIIa – We Want To Be A Product Company \n<p>In Stage IIIa (and Stage IIIb), if the money flows stay the same as in Stages I and II, move to becoming a product company will feel extremely difficult. This is felt in a number of ways. Here’s one common story:</p>\n The company sets up a ‘product team’ that is responsible for productising the various disparate codebases and hacks that made up each customer’s bespoke setup. \n This product team tries to corral the project teams into sacrificing short-term customer delight for long-term product strength and consistency. \n The product team spends a lot of money doing all the work that is required to make a product, but customers are proving less willing than they said to believe and buy into the product. They find it difficult to change their priorities from the feature delivery times and speed of support they are used to, to accepting delays for a cheaper productised product. \n Productisation Debt \n<p>Time and again, development and product teams tell their management that they have to make a call: sacrifice customer satisfaction for the product, or build up ‘productisation debt’.</p>\n Do you tell your biggest customer they are going to have to wait another month for a feature because the product has a release cadence and standards that are greater than they are willing to accept?Even if they have the money ready to get the service they want?Are you willing to watch the relationship with that customer deteriorate over several very difficult meetings as you explain to them that they can’t have what they want when they want it anymore?Are you willing to risk losing them completely?Do you tell them that they suffered an outage because of a change made for another customer last release? Will it be any comfort to them to know that this feature is now available to them (fully fixed in the next release)? \n<div>The product vision – more customers pays less, and product improves</div>\n<p>The result is that it takes a much longer time and more money than thought to get a successful product model going when the older money flows continue to push the organisation towards its old habits and culture. Why trade the feel-good factor of giving the customer what they want now for the slow burn of deferred rising profits in the future?</p>\n<p>On the face of it it the arguments look simple: your profit margin will go up if you productise. The reality is that finance (and therefore the executives, shareholders, salespeople, HR, reward systems etc) have gotten used to the project-based money flows and cadences and find it incredibly hard to give up for some uncertain but better future that may be years away.</p>\n<p>What you end up with is a more complicated version of Stage II (simplified here with only two customers for ‘clarity’).</p>\n<div>The Product reality – customers and finance want to keep the relationship the same</div>\n<p>Rather than your customer teams fighting with the customer to give them what they want, you now have more forces acting in opposition within your org, including:</p>\n The product team fights with the customer teams for resourcesThe customer team fights with the product team over productisation callsFinance fights with the product development team for resources \n<p>The result is likely to end in failure for your product strategy.</p>\n Stage IIIb – We Need A Platform \n<p>The ‘platform’ stage is really a variation on the product phase (Stage IIIa), except that this time the customers have no visibility of the productisation or automation of what they’re sold. This is effectively a product built for an internal customer, the finance team who hope for money to be saved per project over time after an initial investment.</p>\n<div>Platform team money flows similar</div>\n<p>This can be easier or harder to achieve than Stage IIIa depending on the attitude of the internal customer vs the external customer.</p>\n<p>Again, this can be affected by the details of the money flows: if the work to build a platform is on the books as capital expenditure (as opposed to operational expenditure – see below), executives may well ask ‘is the platform built yet?’ This question can baffle the team, as they’re well aware that such a platform is never ‘finished’, as there are always efficiency-generating improvements to make.</p>\n<p>In both Stage IIIs, if the benefits of the platform are not quantified in financial terms from the start, then getting the funding required becomes difficult. This means that you should:</p>\n Measure the cost of delivery per project pre-platform, so you can compare to post platformEnsure that the cost of the platform is ‘baked in’ to the sales cycle, so that there is a concept of platform profit and loss that can also be measuredSet expectations that ‘profit’ may be a long time coming, as is the case with most capital investments. Would you expect to build a house and start turning a profit in 1/20th of its lifetime? \n Money Flow Patterns \n<p>The above patterns are common to small-medium sized software B2B software businesses, but they are not the only patterns that drive cultures and behaviour inappropriate to their stated aims.</p>\n<p>Here we list some significant patterns and their effects on culture, delivery and operations.</p>\n Opex vs capex \n<p>Opex (operational expenditure) and capex (capital expenditure) are two different ways that business spending can be categorised. Briefly, opex is regular expenditure, and capex is significant, long-term expenditure.</p>\n<p>Software projects’ costs have traditionally been categorised under capex, but as cloud computing has arisen, more and more of their costs have been moved to opex.</p>\n<p>The designation of the spending can make a significant difference to how the work is treated by the business.</p>\n They may have different approval processesThere might be more money in the ‘capex pot’ this year than the ‘opex pot’ (or vice versa) Your business may mandate that opex costs are preferred over capex costs because they see the management of assets as a burdenOr (as seen above) if the building of a software platform is considered a capex, then it might be considered as ‘done’ rather than as something that needs to be maintained as an opex \n<p>There are tax implications to both capex and opex that can further complicate discussions.</p>\n<p>The line between what a capex and opex purchase is is not always clear, and most projects will have some kind of mixture of the two that make working out the effect on the business’s profit and loss account for that year difficult.</p>\n Project-based funding \n<p>Project-based funding is where money is allocated to a specific project and/or outcomes, as opposed to product-based work, where funding is usually allocated continuously. Project funding may be on a ‘time and materials’ or ‘fixed cost’ basis.</p>\n<p>The cultural patterns associated with project-based funding are:</p>\n Pride in customer service and satisfactionPrioritisation given to delivery over long-term stabilityScant attention paid to maintenance costsMounting technical debt and increasing complexity over timeLack of co-ordination / duplication of effort between project teams A ‘hero’ culture, as fast fixes to problems that arise gain attention over slower improvementsPerceived higher value for customer-pleasing project work over central and internal infrastructure work \n Yearly funding cycles / business unit funding \n<p>Yearly funding cycles are where money is allocated to projects or products at the same time every year. This is normally driven by accounting cycles, which are almost always yearly.</p>\n<p>Yearly accounting cycles make a mockery of technical teams’ attempts to be truly ‘Agile’ in response to business demand. If a released MVP product flies off the shelf in February, then you can’t get funding to scale it up until January next year.</p>\n<p>Strict yearly funding cycles are also often associated with centralised funding within large business units that sit within larger organisations. This can make working in an agile way even harder, as there are two levels of politics to negotiate before more funding can be gained for your team: your own business unit’s internal politics, and the business unit’s relationship with the central funders.</p>\n First mover bears the cost \n<p>Individual business unit funding also makes it significantly harder for any kind of project whose benefits cut across business units to get off the ground, eg ‘Platform’ or ‘Infrastructure’ work. Costs for such projects are typically borne by a single centralised business unit that is perceived as delivering little business value, so is starved of funding.</p>\n<p>This can also be characterised as a ‘first mover bears the cost’ problem.</p>\n No money for hard-to-measure benefits \n<p>Some organisations take a strict view of cost/benefit for any given expenditure that they make that must show some direct, tangible return on investment.</p>\n<p>In general, this is sensible, but can result in difficulty getting funding for projects where there is not a readily measurable return.</p>\n<p>For example, what if your investment:</p>\n Helps retain staffEnables more dynamic and faster business outcomesReduces the risk of a failed audit \n<p>Is there a way to measure these, or even the language to state them as benefits at all?</p>\n<p>Many businesses have no leeway for these qualitative benefits to factor into business cases.</p>\n What Is To Be Done? \n<p>Whenever you want to debug a misbehaving program, you want to get to the root cause. Workarounds are unsatisfying, and ultimately result in further problems as the workaround itself shows its failings.</p>\n<p>I feel the same way about ‘cultural problems’ in organisations. It’s not enough to put posters up around and office imploring people to ‘be more agile’, or instruct people to have a daily stand-up and a two week work cadence to drive cultural change.</p>\n<p>No, you have to go to the root of the structures that drive behaviour in order to make lasting change, whether it’s on a personal level or organisational. And my argument here is that the root of behaviours can be traced back to money flows.</p>\n<p>So, what can you do about it? Here’s some suggestions:</p>\n Involve the CFO/finance team in the change program from the startExplain to finance the reality of what you’re doingLearn to speak the language of finance – talk to them \n<p>Most important of all, if you’re going to change the behaviour and goals of an organisation, you are going to have to change the way money moves around it. As Einstein is [wrongly said to have] said, doing the same thing over and over and expecting different is the definition of insanity.</p>\n<p>If you can engage with finance in an open and enquiring way, then together you can make lasting change; if you don’t, then you will be fighting the tide. Just ask Marx. </p>\n  \n<p>If you enjoyed this, then please consider buying me a coffee to encourage me to do more.</p>\n<div><div> Like this: <p>Like Loading...</p></div>\n<p>\n Related \n</p></div></div></div>"
}